<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="1" author="mbragin">
        <createTable tableName="project">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="2" author="mbragin">
        <createTable tableName="company">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="name" type="varchar (500)">
                <constraints unique="true" nullable="false"/>
            </column>
            <column name="description" type="varchar"/>
            <column name="promo" type="varchar"/>
            <column name="project_id" type="bigint">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addForeignKeyConstraint baseTableName="company"
                                 baseColumnNames="project_id"
                                 constraintName="company_project_id"
                                 referencedTableName="project"
                                 referencedColumnNames="id"/>
    </changeSet>

    <changeSet id="3" author="mbragin">
        <insert tableName="project">
            <column name="id" value="0"/>
        </insert>
    </changeSet>

    <changeSet id="4" author="mbragin">
        <createTable tableName="branch">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="name" type="varchar (500)">
                <constraints unique="true" nullable="false"/>
            </column>
            <column name="description" type="varchar"/>
            <column name="article" type="varchar"/>
            <column name="company_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="address" type="varchar"/>
            <column name="lat" type="double precision"/>
            <column name="lon" type="double precision"/>
            <column name="office" type="varchar"/>
            <column name="currency" type="varchar"/>
            <column name="created" type="bigint"/>
            <column name="updated" type="bigint"/>
        </createTable>

        <addForeignKeyConstraint baseTableName="branch"
                                 baseColumnNames="company_id"
                                 constraintName="branch_company_id"
                                 referencedTableName="company"
                                 referencedColumnNames="id"/>
    </changeSet>

    <changeSet id="5" author="mbragin">
        <addColumn tableName="company">
            <column name="created" type="bigint"/>
            <column name="updated" type="bigint"/>
        </addColumn>
    </changeSet>

    <changeSet id="6" author="mbragin">
        <sql>
            UPDATE company SET created = 1392996233, updated = 1392996233;
            UPDATE branch SET created = 1392996233, updated = 1392996233;
        </sql>
    </changeSet>

    <changeSet id="7" author="mbragin">
        <sql>CREATE TYPE contact_type AS ENUM ('email','website', 'phone', 'fax', 'skype', 'jabber', 'twitter',
            'instagram',
            'facebook')
        </sql>
        <createTable tableName="contact">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="value" type="varchar (20)">
                <constraints nullable="false"/>
            </column>
            <column name="type" type="contact_type">
                <constraints nullable="false"/>
            </column>
            <column name="comment" type="varchar (100)"/>
        </createTable>
    </changeSet>

    <changeSet id="8" author="mbragin">
        <sql>CREATE TYPE payment_option AS ENUM ('visa','mastercard', 'cash', 'american_express', 'cheque')</sql>
        <addColumn tableName="branch">
            <column name="payment_option" type="payment_option"/>
        </addColumn>
    </changeSet>

    <changeSet id="9" author="mbragin">
        <sql>DROP TABLE IF EXISTS contact</sql>

        <createTable tableName="branch_contacts">
            <column name="branch_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="contact" type="contact_type">
                <constraints nullable="false"/>
            </column>
            <column name="value" type="varchar (100)">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addForeignKeyConstraint baseTableName="branch_contacts"
                                 baseColumnNames="branch_id"
                                 constraintName="branch_contacts_id"
                                 referencedTableName="branch"
                                 referencedColumnNames="id"/>
    </changeSet>

    <changeSet id="10" author="mbragin">
        <addColumn tableName="branch_contacts">
            <column name="comment" type="varchar (100)"/>
        </addColumn>
    </changeSet>


    <changeSet id="11" author="mbragin">
        <createTable tableName="rubric">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="name" type="varchar (200)">
                <constraints nullable="false"/>
            </column>
            <column name="parent_id" type="bigserial"/>
        </createTable>

        <addForeignKeyConstraint baseTableName="rubric"
                                 baseColumnNames="parent_id"
                                 constraintName="rubric_parent_id"
                                 referencedTableName="rubric"
                                 referencedColumnNames="id"/>
    </changeSet>

    <changeSet id="12" author="mbragin">
        <sql>CREATE TYPE attributes_type AS ENUM ('boolean', 'number', 'range', 'string')</sql>

        <createTable tableName="attributes_group">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="name" type="varchar (100)">
                <constraints nullable="false"/>
            </column>
            <column name="attributes_type" type="attributes_type">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="13" author="mbragin">
        <createTable tableName="attribute">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="name" type="varchar (100)">
                <constraints nullable="false"/>
            </column>
            <column name="group_id" type="bigint">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addForeignKeyConstraint baseTableName="attribute"
                                 baseColumnNames="group_id"
                                 constraintName="attribute_group_id"
                                 referencedTableName="attributes_group"
                                 referencedColumnNames="id"/>
    </changeSet>

    <changeSet id="14" author="mbragin">
        <addColumn tableName="attribute">
            <column name="possible_values" type="varchar"/>
        </addColumn>
    </changeSet>

    <changeSet id="15" author="mbragin">
        <createTable tableName="rubric_attributes_group">
            <column name="rubric_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="attributes_group_id" type="bigint">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addForeignKeyConstraint baseTableName="rubric_attributes_group"
                                 baseColumnNames="rubric_id"
                                 constraintName="rubric_attributes_group_id"
                                 referencedTableName="rubric"
                                 referencedColumnNames="id"/>

        <addForeignKeyConstraint baseTableName="rubric_attributes_group"
                                 baseColumnNames="attributes_group_id"
                                 constraintName="attributes_group_id_attributes_group_id"
                                 referencedTableName="attributes_group"
                                 referencedColumnNames="id"/>
    </changeSet>

    <changeSet id="16" author="mbragin">
        <createTable tableName="branch_attributes">
            <column name="branch_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="attribute_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="value" type="varchar">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addForeignKeyConstraint baseTableName="branch_attributes"
                                 baseColumnNames="branch_id"
                                 constraintName="branch_id_branch_attributes"
                                 referencedTableName="branch"
                                 referencedColumnNames="id"/>

        <addForeignKeyConstraint baseTableName="branch_attributes"
                                 baseColumnNames="attribute_id"
                                 constraintName="attribute_id_branch_attributes"
                                 referencedTableName="attribute"
                                 referencedColumnNames="id"/>
    </changeSet>

    <changeSet id="17" author="mbragin">
        <addPrimaryKey tableName="branch_attributes"
                       columnNames="branch_id, attribute_id"
                       constraintName="pk_branch_attributes"/>

        <addPrimaryKey tableName="rubric_attributes_group"
                       columnNames="rubric_id, attributes_group_id"
                       constraintName="pk_rubric_attributes_group"/>
    </changeSet>

    <changeSet id="18" author="andpar">
        <addColumn tableName="project">
            <column name="name" type="varchar"/>
        </addColumn>
    </changeSet>

    <changeSet id="18" author="mbragin">
        <createTable tableName="branch_rubrics">
            <column name="branch_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="rubric_id" type="bigint">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addForeignKeyConstraint baseTableName="branch_rubrics"
                                 baseColumnNames="branch_id"
                                 constraintName="branch_id_branch_rubrics"
                                 referencedTableName="branch"
                                 referencedColumnNames="id"/>

        <addForeignKeyConstraint baseTableName="branch_rubrics"
                                 baseColumnNames="rubric_id"
                                 constraintName="rubric_id_branch_rubrics"
                                 referencedTableName="rubric"
                                 referencedColumnNames="id"/>
    </changeSet>

    <changeSet id="19" author="mbragin">
        <addPrimaryKey tableName="branch_rubrics"
                       columnNames="branch_id, rubric_id"
                       constraintName="pk_branch_rubrics"/>
    </changeSet>

    <changeSet id="20" author="mbragin">
        <dropColumn columnName="payment_option"
                    tableName="branch"/>

        <createTable tableName="branch_payment_options">
            <column name="branch_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="payment_option" type="payment_option">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addForeignKeyConstraint baseTableName="branch_payment_options"
                                 baseColumnNames="branch_id"
                                 constraintName="fk_branch_id_branch_payment_options"
                                 referencedTableName="branch"
                                 referencedColumnNames="id"/>

    </changeSet>

    <changeSet id="21" author="mbragin">
        <addColumn tableName="branch_contacts">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet id="22" author="mbragin">
        <addColumn tableName="branch">
            <column name="additional_info" type="json"/>
        </addColumn>
    </changeSet>

    <!--constrains for json fields in branch table: lat, lon, contacts(check function+constraint),
    payment_options(check function+constraint)-->
    <changeSet id="23" author="mbragin">
        <sql splitStatements="false">
            ALTER TABLE branch ADD CONSTRAINT validate_point_lat CHECK
            ((((additional_info->>'geometry')::json->>'point')::json->>'lat')::double precision BETWEEN -90.0 AND 90.0);
            ALTER TABLE branch ADD CONSTRAINT validate_point_lon CHECK
            ((((additional_info->>'geometry')::json->>'point')::json->>'lon')::double precision BETWEEN -180.0 AND
            180.0);
            CREATE OR REPLACE FUNCTION branch_contacts_check(JSON) RETURNS boolean AS
            $BODY$
            DECLARE
            i json;
            c contact_type;
            BEGIN
            FOR i IN SELECT * FROM json_array_elements($1->'contacts')
            LOOP
            c:= (i->>'contact')::contact_type;
            END LOOP;
            RETURN true;
            EXCEPTION
            WHEN SQLSTATE '22P02' THEN
            RETURN false;
            END;
            $BODY$
            language plpgsql;

            ALTER TABLE branch ADD CONSTRAINT validate_branch_contacts CHECK (branch_contacts_check(additional_info));

            CREATE OR REPLACE FUNCTION branch_payment_options_check(JSON) RETURNS boolean AS
            $BODY$
            DECLARE
            i json;
            c payment_option;
            BEGIN
            FOR i IN SELECT * FROM json_array_elements($1->'payment_options')
            LOOP
            c:= (i->>'option')::payment_option;
            END LOOP;
            RETURN true;
            EXCEPTION
            WHEN SQLSTATE '22P02' THEN
            RETURN false;
            END;
            $BODY$
            language plpgsql;

            ALTER TABLE branch ADD CONSTRAINT validate_branch_payment_options CHECK
            (branch_payment_options_check(additional_info));
        </sql>
    </changeSet>

    <changeSet id="24" author="mbragin">
        <dropColumn tableName="branch"
                    columnName="description"/>
        <dropColumn tableName="branch"
                    columnName="address"/>
        <dropColumn tableName="branch"
                    columnName="article"/>
        <dropColumn tableName="branch"
                    columnName="lon"/>
        <dropColumn tableName="branch"
                    columnName="office"/>
        <dropColumn tableName="branch"
                    columnName="currency"/>
        <dropColumn tableName="branch"
                    columnName="lat"/>
    </changeSet>

    <changeSet author="mbragin" id="25">
        <renameColumn columnDataType="json"
                      newColumnName="data"
                      oldColumnName="additional_info"
                      tableName="branch"/>
    </changeSet>

    <changeSet author="mbragin" id="26">
        <sql>ALTER TABLE branch DROP CONSTRAINT validate_branch_payment_options;
            ALTER TABLE branch DROP CONSTRAINT validate_branch_contacts;
            ALTER TABLE branch DROP CONSTRAINT validate_point_lat;
            ALTER TABLE branch DROP CONSTRAINT validate_point_lon;

            ALTER TABLE branch ADD CONSTRAINT validate_branch_contacts CHECK (branch_contacts_check(data));
            ALTER TABLE branch ADD CONSTRAINT validate_branch_payment_options CHECK
            (branch_payment_options_check(data));
            ALTER TABLE branch ADD CONSTRAINT validate_point_lat CHECK
            ((((data->>'geometry')::json->>'point')::json->>'lat')::double precision BETWEEN -90.0 AND 90.0);
            ALTER TABLE branch ADD CONSTRAINT validate_point_lon CHECK
            ((((data->>'geometry')::json->>'point')::json->>'lon')::double precision BETWEEN -180.0 AND
            180.0);
        </sql>
    </changeSet>

    <changeSet author="mbragin" id="27">
        <dropTable tableName="branch_contacts"/>
        <dropTable tableName="branch_payment_options"/>
    </changeSet>

    <changeSet id="28" author="mbragin">
        <addColumn tableName="attributes_group">
            <column name="names" type="json"/>
            <column name="values" type="json"/>
            <column name="meta" type="json"/>
        </addColumn>
    </changeSet>

    <changeSet id="29" author="mbragin">
        <dropColumn tableName="attributes_group"
                    columnName="name"/>
        <dropColumn tableName="attributes_group"
                    columnName="attributes_type"/>
    </changeSet>

    <changeSet id="30" author="mbragin">
        <dropColumn tableName="attributes_group"
                    columnName="names"/>
        <dropColumn tableName="attributes_group"
                    columnName="values"/>
        <dropColumn tableName="attributes_group"
                    columnName="meta"/>
        <addColumn tableName="attributes_group">
            <column name="data" type="json"/>
            <column name="created" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="updated" type="bigint">
                <constraints nullable="false"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet author="mbragin" id="31">
        <dropTable tableName="branch_attributes"/>
        <dropTable tableName="attribute"/>
    </changeSet>

    <changeSet id="32" author="mbragin">
        <dropColumn tableName="rubric"
                    columnName="name"/>
        <addColumn tableName="rubric">
            <column name="data" type="json"/>
            <column name="created" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="updated" type="bigint">
                <constraints nullable="false"/>
            </column>
        </addColumn>
        <sql>ALTER TABLE rubric ADD CONSTRAINT validate_rubric_names CHECK ((data->>'names') IS NOT NULL);</sql>
    </changeSet>

    <changeSet id="33" author="mbragin">
        <createTable tableName="attribute">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="data" type="json"/>
            <column name="group_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="created" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="updated" type="bigint">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addForeignKeyConstraint baseTableName="attribute"
                                 baseColumnNames="group_id"
                                 constraintName="attribute_group_id"
                                 referencedTableName="attributes_group"
                                 referencedColumnNames="id"/>
    </changeSet>

    <changeSet id="34" author="mbragin">
        <sql>ALTER TABLE rubric DROP CONSTRAINT rubric_parent_id</sql>
    </changeSet>

    <changeSet id="35" author="mbragin">
        <sql>ALTER TABLE rubric ALTER COLUMN parent_id DROP NOT NULL</sql>
        <sql>ALTER TABLE rubric ALTER COLUMN parent_id SET DATA TYPE bigint</sql>
        <sql>DROP sequence rubric_parent_id_seq CASCADE</sql>
    </changeSet>

    <changeSet id="36" author="mbragin">
        <addForeignKeyConstraint baseTableName="rubric"
                                 baseColumnNames="parent_id"
                                 constraintName="rubric_parent_id"
                                 referencedTableName="rubric"
                                 referencedColumnNames="id"/>
    </changeSet>

    <changeSet id="37" author="mbragin">
        <createTable
                catalogName="raw_data"
                tableName="data">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="data" type="json"/>
        </createTable>
    </changeSet>

    <changeSet id="38" author="mbragin">
        <dropTable tableName="data"/>
        <createTable
                schemaName="raw_data"
                tableName="data">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="data" type="json"/>
        </createTable>
    </changeSet>

    <changeSet id="39" author="mbragin">
        <sql>CREATE TYPE raw_data_source AS ENUM ('abrasel','4square', 'hagah')</sql>
        <addColumn tableName="data" schemaName="raw_data">
            <column name="source" type="raw_data_source"/>
        </addColumn>
    </changeSet>

    <changeSet author="mbragin" id="40">
        <sql>ALTER TABLE branch DROP CONSTRAINT validate_branch_payment_options;
        </sql>
    </changeSet>

    <changeSet author="mbragin" id="41">
        <sql>ALTER TABLE company DROP CONSTRAINT company_name_key;
            ALTER TABLE branch DROP CONSTRAINT branch_name_key;
        </sql>
    </changeSet>

    <changeSet id="42" author="mbragin">
        <dropTable tableName="branch_rubrics"/>
    </changeSet>

    <changeSet id="43" author="mbragin">
        <sql>CREATE TYPE operation_type AS ENUM ('CREATE','UPDATE', 'DELETE')
        </sql>
        <createTable
                schemaName="journal"
                tableName="j_branch">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="data" type="json">
                <constraints nullable="false"/>
            </column>
            <column name="timestamp" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="operation_type" type="operation_type">
                <constraints nullable="false"/>
            </column>
            <column name="source_id" type="bigint">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="44" author="mbragin">
        <sql>UPDATE pg_enum SET enumlabel = 'I'
            WHERE enumlabel = 'CREATE' AND enumtypid = (
            SELECT oid FROM pg_type WHERE typname = 'operation_type'
            )
        </sql>
        <sql>UPDATE pg_enum SET enumlabel = 'U'
            WHERE enumlabel = 'UPDATE' AND enumtypid = (
            SELECT oid FROM pg_type WHERE typname = 'operation_type'
            )
        </sql>
        <sql>UPDATE pg_enum SET enumlabel = 'D'
            WHERE enumlabel = 'DELETE' AND enumtypid = (
            SELECT oid FROM pg_type WHERE typname = 'operation_type'
            )
        </sql>
    </changeSet>

    <changeSet id="45" author="mbragin">
        <dropColumn columnName="timestamp"
                    schemaName="journal"
                    tableName="j_branch"/>
        <addColumn tableName="j_branch" schemaName="journal">
            <column name="timestamp" type="TIMESTAMP WITH TIMEZONE">
                <constraints nullable="false"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet id="46" author="mbragin">
        <addColumn tableName="j_branch" schemaName="journal">
            <column name="company_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="name" type="varchar(500)">
                <constraints nullable="false"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet id="47" author="mbragin">
        <createTable
                schemaName="journal"
                tableName="j_company">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="name" type="varchar (500)">
                <constraints unique="true" nullable="false"/>
            </column>
            <column name="description" type="varchar"/>
            <column name="promo" type="varchar"/>
            <column name="project_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="timestamp" type="TIMESTAMP WITH TIMEZONE">
                <constraints nullable="false"/>
            </column>
            <column name="source_id" type="bigint">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="48" author="mbragin">
        <addColumn tableName="j_company" schemaName="journal">
            <column name="operation_type" type="operation_type">
                <constraints nullable="false"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet id="49" author="mbragin">
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION process_company_journaling() RETURNS TRIGGER AS $company_journaling$
            BEGIN
            IF (TG_OP = 'DELETE') THEN
            INSERT INTO journal.j_company (source_id, name, operation_type, timestamp, project_id, description, promo)
            VALUES (OLD.id, OLD.name, 'D', now(), OLD.project_id, OLD.description. OLD.promo);
            RETURN OLD;
            ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO journal.j_company (source_id, name, operation_type, timestamp, company_id)
            VALUES (NEW.id, NEW.name, 'U', now(), NEW.project_id, NEW.description. NEW.promo);
            RETURN NEW;
            ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO journal.j_company (source_id, name, operation_type, timestamp, company_id)
            VALUES (NEW.id, NEW.name, 'I', now(), NEW.project_id, NEW.description. NEW.promo);
            RETURN NEW;
            END IF;
            RETURN NULL; -- result is ignored since this is an AFTER trigger
            END;
            $company_journaling$ LANGUAGE plpgsql;

            DROP TRIGGER IF EXISTS company_journaling ON public.company;

            CREATE TRIGGER company_journaling
            AFTER INSERT OR UPDATE OR DELETE ON public.company
            FOR EACH ROW EXECUTE PROCEDURE process_company_journaling();
        </sql>
        <rollback>
            DROP TRIGGER company_journaling ON public.company;
        </rollback>
    </changeSet>

    <changeSet id="50" author="mbragin">
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION process_branch_journaling() RETURNS TRIGGER AS $branch_journaling$
            BEGIN
            --
            -- Create a row in journaling.j_branch to reflect the operation performed on public.branch,
            -- make use of the special variable TG_OP to work out the operation.
            --
            IF (TG_OP = 'DELETE') THEN
            INSERT INTO journal.j_branch (source_id, name, operation_type, timestamp, company_id) VALUES (OLD.id,
            OLD.name, 'D', now(), OLD.company_id);
            RETURN OLD;
            ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO journal.j_branch (source_id, name, operation_type, timestamp, company_id) VALUES (NEW.id,
            NEW.name, 'U', now(), NEW.company_id);
            RETURN NEW;
            ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO journal.j_branch (source_id, name, operation_type, timestamp, company_id) VALUES (NEW.id,
            NEW.name, 'I', now(), NEW.company_id);
            RETURN NEW;
            END IF;
            RETURN NULL; -- result is ignored since this is an AFTER trigger
            END;
            $branch_journaling$ LANGUAGE plpgsql;

            DROP TRIGGER IF EXISTS branch_journaling ON public.branch;

            CREATE TRIGGER branch_journaling
            AFTER INSERT OR UPDATE OR DELETE ON public.branch
            FOR EACH ROW EXECUTE PROCEDURE process_branch_journaling();
        </sql>
        <rollback>
            DROP TRIGGER branch_journaling ON public.branch;
        </rollback>
    </changeSet>

    <changeSet id="51" author="mbragin">
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION process_company_journaling() RETURNS TRIGGER AS $company_journaling$
            BEGIN
            IF (TG_OP = 'DELETE') THEN
            INSERT INTO journal.j_company (source_id, name, operation_type, timestamp, project_id, description, promo)
            VALUES (OLD.id, OLD.name, 'D', now(), OLD.project_id, OLD.description. OLD.promo);
            RETURN OLD;
            ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO journal.j_company (source_id, name, operation_type, timestamp, project_id, description, promo)
            VALUES (NEW.id, NEW.name, 'U', now(), NEW.project_id, NEW.description. NEW.promo);
            RETURN NEW;
            ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO journal.j_company (source_id, name, operation_type, timestamp, project_id, description, promo)
            VALUES (NEW.id, NEW.name, 'I', now(), NEW.project_id, NEW.description. NEW.promo);
            RETURN NEW;
            END IF;
            RETURN NULL; -- result is ignored since this is an AFTER trigger
            END;
            $company_journaling$ LANGUAGE plpgsql;

            DROP TRIGGER IF EXISTS company_journaling ON public.company;

            CREATE TRIGGER company_journaling
            AFTER INSERT OR UPDATE OR DELETE ON public.company
            FOR EACH ROW EXECUTE PROCEDURE process_company_journaling();
        </sql>
        <rollback>
            DROP TRIGGER company_journaling ON public.company;
        </rollback>
    </changeSet>

    <changeSet id="52" author="mbragin">
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION process_company_journaling()
            RETURNS TRIGGER AS $company_journaling$
            BEGIN
            IF (TG_OP = 'DELETE')
            THEN
            INSERT INTO journal.j_company (source_id, name, operation_type, timestamp, project_id, description, promo)
            VALUES (OLD.id, OLD.name, 'D', now(), OLD.project_id, OLD.description, OLD.promo);
            RETURN OLD;
            ELSIF (TG_OP = 'UPDATE')
            THEN
            INSERT INTO journal.j_company (source_id, name, operation_type, timestamp, project_id, description, promo)
            VALUES (NEW.id, NEW.name, 'U', now(), NEW.project_id, NEW.description, NEW.promo);
            RETURN NEW;
            ELSIF (TG_OP = 'INSERT')
            THEN
            INSERT INTO journal.j_company (source_id, name, operation_type, timestamp, project_id, description, promo)
            VALUES (NEW.id, NEW.name, 'I', now(), NEW.project_id, NEW.description, NEW.promo);
            RETURN NEW;
            END IF;
            RETURN NULL;
            -- result is ignored since this is an AFTER trigger
            END;
            $company_journaling$ LANGUAGE plpgsql;
        </sql>
        <rollback>
            DROP TRIGGER company_journaling ON public.company;
        </rollback>
    </changeSet>

    <changeSet id="53" author="mbragin">
        <dropNotNullConstraint columnDataType="json"
                               columnName="data"
                               schemaName="journal"
                               tableName="j_branch"/>
    </changeSet>

    <changeSet id="54" author="mbragin">
        <sql>ALTER TABLE journal.j_company DROP CONSTRAINT j_company_name_key</sql>
    </changeSet>

    <changeSet id="55" author="mbragin">
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION process_branch_journaling() RETURNS TRIGGER AS $branch_journaling$
            BEGIN
            --
            -- Create a row in journaling.j_branch to reflect the operation performed on public.branch,
            -- make use of the special variable TG_OP to work out the operation.
            --
            IF (TG_OP = 'DELETE') THEN
            INSERT INTO journal.j_branch (source_id, name, operation_type, timestamp, company_id, data)
            VALUES (OLD.id, OLD.name, 'D', now(), OLD.company_id, OLD.data);
            RETURN OLD;
            ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO journal.j_branch (source_id, name, operation_type, timestamp, company_id, data)
            VALUES (NEW.id, NEW.name, 'U', now(), NEW.company_id, NEW.data);
            RETURN NEW;
            ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO journal.j_branch (source_id, name, operation_type, timestamp, company_id, data)
            VALUES (NEW.id, NEW.name, 'I', now(), NEW.company_id, NEW.data);
            RETURN NEW;
            END IF;
            RETURN NULL; -- result is ignored since this is an AFTER trigger
            END;
            $branch_journaling$ LANGUAGE plpgsql;

            DROP TRIGGER IF EXISTS branch_journaling ON public.branch;

            CREATE TRIGGER branch_journaling
            AFTER INSERT OR UPDATE OR DELETE ON public.branch
            FOR EACH ROW EXECUTE PROCEDURE process_branch_journaling();
        </sql>
        <rollback>
            DROP TRIGGER branch_journaling ON public.branch;
        </rollback>
    </changeSet>

    <changeSet id="56" author="mbragin">
        <sql splitStatements="false">
            CREATE SCHEMA IF NOT EXISTS audit
        </sql>
        <createTable schemaName="audit"
                     tableName="a_branch">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="data" type="json">
                <constraints nullable="false"/>
            </column>
            <column name="timestamp" type="TIMESTAMP WITH TIMEZONE">
                <constraints nullable="false"/>
            </column>
            <column name="operation_type" type="operation_type">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <createTable schemaName="audit"
                     tableName="a_company">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="data" type="json">
                <constraints nullable="false"/>
            </column>
            <column name="timestamp" type="TIMESTAMP WITH TIMEZONE">
                <constraints nullable="false"/>
            </column>
            <column name="operation_type" type="operation_type">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="57" author="mbragin">
        <sql>DROP TRIGGER branch_journaling ON public.branch;</sql>
        <sql>DROP TRIGGER company_journaling ON public.company;</sql>
        <sql>DROP FUNCTION IF EXISTS process_branch_journaling()</sql>
        <sql>DROP FUNCTION IF EXISTS process_company_journaling()</sql>
        <dropTable tableName="journal.j_branch"/>
        <dropTable tableName="journal.j_company"/>
        <sql splitStatements="false">
            DROP SCHEMA IF EXISTS journal CASCADE;
        </sql>
    </changeSet>


    <changeSet id="58" author="mbragin">
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION branch_audit()
            RETURNS trigger AS
            $BODY$
            BEGIN
            IF (TG_OP = 'DELETE') THEN
            INSERT INTO audit.a_branch (operation_type, timestamp, data)
            VALUES ('D', now(), row_to_json(OLD));
            RETURN OLD;
            ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO audit.a_branch (operation_type, timestamp, data)
            VALUES ('U', now(), row_to_json(NEW));
            RETURN NEW;
            ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO audit.a_branch (operation_type, timestamp, data)
            VALUES ('I', now(), row_to_json(NEW));
            RETURN NEW;
            END IF;
            RETURN NULL; -- result is ignored since this is an AFTER trigger
            END;
            $BODY$
            LANGUAGE plpgsql VOLATILE
            COST 100;
            ALTER FUNCTION branch_audit()
            OWNER TO postgres;

            DROP TRIGGER IF EXISTS trg_branch_audit ON public.branch;

            CREATE TRIGGER trg_branch_audit
            AFTER INSERT OR UPDATE OR DELETE
            ON branch
            FOR EACH ROW
            EXECUTE PROCEDURE branch_audit();
        </sql>
        <rollback>
            DROP TRIGGER trg_branch_audit ON public.branch;
        </rollback>
    </changeSet>

    <changeSet id="59" author="mbragin">
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION company_audit()
            RETURNS trigger AS
            $BODY$
            BEGIN
            IF (TG_OP = 'DELETE') THEN
            INSERT INTO audit.a_company (operation_type, timestamp, data)
            VALUES ('D', now(), row_to_json(OLD));
            RETURN OLD;
            ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO audit.a_company (operation_type, timestamp, data)
            VALUES ('U', now(), row_to_json(NEW));
            RETURN NEW;
            ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO audit.a_company (operation_type, timestamp, data)
            VALUES ('I', now(), row_to_json(NEW));
            RETURN NEW;
            END IF;
            RETURN NULL; -- result is ignored since this is an AFTER trigger
            END;
            $BODY$
            LANGUAGE plpgsql VOLATILE
            COST 100;
            ALTER FUNCTION company_audit()
            OWNER TO postgres;

            CREATE TRIGGER trg_company_audit
            AFTER INSERT OR UPDATE OR DELETE
            ON company
            FOR EACH ROW
            EXECUTE PROCEDURE company_audit();
        </sql>
        <rollback>
            DROP TRIGGER trg_company_audit ON public.company;
        </rollback>
    </changeSet>

    <changeSet id="60" author="mbragin">
        <dropColumn columnName="created"
                    tableName="branch"/>
        <dropColumn columnName="updated"
                    tableName="branch"/>

        <dropColumn columnName="created"
                    tableName="company"/>
        <dropColumn columnName="updated"
                    tableName="company"/>
    </changeSet>

    <changeSet id="61" author="mbragin">
        <createIndex indexName="idx_a_branch_timestamp"
                     schemaName="audit"
                     tableName="a_branch">
            <column name="timestamp" type="timestamp with timezone"/>
        </createIndex>
        <createIndex indexName="idx_a_company_timestamp"
                     schemaName="audit"
                     tableName="a_company">
            <column name="timestamp" type="timestamp with timezone"/>
        </createIndex>
    </changeSet>

    <changeSet id="62" author="mbragin">
        <sql>ALTER TABLE audit.a_branch ADD CONSTRAINT validate_source_id CHECK ((data->>'id') IS NOT NULL AND
            (data->>'id')::text != '');
        </sql>
        <sql>ALTER TABLE audit.a_company ADD CONSTRAINT validate_source_id CHECK ((data->>'id') IS NOT NULL AND
            (data->>'id')::text != '');
        </sql>
    </changeSet>

    <changeSet id="63" author="mbragin">
        <createTable schemaName="audit"
                     tableName="index_builder">
            <column name="timestamp" type="timestamp with timezone">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="64" author="mbragin">
        <sql>DELETE FROM audit.index_builder;
            INSERT INTO audit.index_builder(
            "timestamp")
            VALUES ('2014-01-01 00:00:00.000-03');
        </sql>
    </changeSet>

    <changeSet id="65" author="mbragin">
        <createTable schemaName="audit"
                     tableName="a_attribute">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="data" type="json">
                <constraints nullable="false"/>
            </column>
            <column name="timestamp" type="TIMESTAMP WITH TIMEZONE">
                <constraints nullable="false"/>
            </column>
            <column name="operation_type" type="operation_type">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <createTable schemaName="audit"
                     tableName="a_rubric">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="data" type="json">
                <constraints nullable="false"/>
            </column>
            <column name="timestamp" type="TIMESTAMP WITH TIMEZONE">
                <constraints nullable="false"/>
            </column>
            <column name="operation_type" type="operation_type">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="66" author="mbragin">
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION attribute_audit()
            RETURNS trigger AS
            $BODY$
            BEGIN
            IF (TG_OP = 'DELETE') THEN
            INSERT INTO audit.a_attribute (operation_type, timestamp, data)
            VALUES ('D', now(), row_to_json(OLD));
            RETURN OLD;
            ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO audit.a_attribute (operation_type, timestamp, data)
            VALUES ('U', now(), row_to_json(NEW));
            RETURN NEW;
            ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO audit.a_attribute (operation_type, timestamp, data)
            VALUES ('I', now(), row_to_json(NEW));
            RETURN NEW;
            END IF;
            RETURN NULL; -- result is ignored since this is an AFTER trigger
            END;
            $BODY$
            LANGUAGE plpgsql VOLATILE
            COST 100;
            ALTER FUNCTION attribute_audit()
            OWNER TO postgres;

            CREATE TRIGGER trg_attribute_audit
            AFTER INSERT OR UPDATE OR DELETE
            ON public.attribute
            FOR EACH ROW
            EXECUTE PROCEDURE attribute_audit();
        </sql>
        <rollback>
            DROP TRIGGER trg_attribute_audit ON public.attribute;
        </rollback>
    </changeSet>

    <changeSet id="67" author="mbragin">
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION rubric_audit()
            RETURNS trigger AS
            $BODY$
            BEGIN
            IF (TG_OP = 'DELETE') THEN
            INSERT INTO audit.a_rubric (operation_type, timestamp, data)
            VALUES ('D', now(), row_to_json(OLD));
            RETURN OLD;
            ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO audit.a_rubric (operation_type, timestamp, data)
            VALUES ('U', now(), row_to_json(NEW));
            RETURN NEW;
            ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO audit.a_rubric (operation_type, timestamp, data)
            VALUES ('I', now(), row_to_json(NEW));
            RETURN NEW;
            END IF;
            RETURN NULL; -- result is ignored since this is an AFTER trigger
            END;
            $BODY$
            LANGUAGE plpgsql VOLATILE
            COST 100;
            ALTER FUNCTION attribute_audit()
            OWNER TO postgres;

            CREATE TRIGGER trg_rubric_audit
            AFTER INSERT OR UPDATE OR DELETE
            ON public.rubric
            FOR EACH ROW
            EXECUTE PROCEDURE rubric_audit();
        </sql>
        <rollback>
            DROP TRIGGER trg_rubric_audit ON public.rubric;
        </rollback>
    </changeSet>

    <changeSet id="68" author="mbragin">
        <addColumn schemaName="audit"
                   tableName="index_builder">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet id="69" author="mbragin">
        <addColumn tableName="project" schemaName="public">
            <column name="data" type="json"/>
        </addColumn>
    </changeSet>

    <changeSet id="70" author="mbragin">
    <dropColumn columnName="name"
                tableName="project"/>
    </changeSet>

    <changeSet id="71" author="mbragin">
        <addColumn tableName="company" schemaName="public">
            <column name="data" type="json"/>
        </addColumn>
        <dropColumn columnName="description"
                    tableName="company"/>
        <dropColumn columnName="promo"
                    tableName="company"/>
    </changeSet>

    <changeSet id="72" author="mbragin">
        <sql>UPDATE public.company SET data = '{ "description": null, "promo": null, "branch_count": 1 }'::json;</sql>
    </changeSet>

    <changeSet id="73" author="mbragin">
        <addColumn tableName="branch">
            <column name="draft" type="json"/>
        </addColumn>
    </changeSet>

    <changeSet id="74" author="mbragin">
        <addColumn tableName="rubric_attributes_group">
            <column name="general" type="boolean"/>
        </addColumn>
    </changeSet>

    <changeSet id="75" author="mbragin">
        <createTable tableName="feedback">
            <column name="id" type="bigserial">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="name" type="varchar"/>
            <column name="email" type="varchar"/>
            <column name="body" type="varchar"/>
            <column name="project_id" type="bigint"/>
            <column name="rating" type="int"/>
        </createTable>
    </changeSet>

    <changeSet id="76" author="mbragin">
        <addColumn tableName="data"  schemaName="raw_data">
            <column name="draft" type="json"/>
        </addColumn>
        <renameColumn columnDataType="json"
                      newColumnName="raw"
                      oldColumnName="data"
                      schemaName="raw_data"
                      tableName="data"/>
    </changeSet>

    <changeSet id="77" author="mbragin">
        <dropForeignKeyConstraint baseTableName="rubric" constraintName="rubric_parent_id"/>
    </changeSet>

    <changeSet id="78" author="mbragin">
        <addColumn tableName="index_builder"  schemaName="audit">
            <column name="snapshot_timestamp" type="timestamp with timezone">

            </column>
        </addColumn>
        <sql>
            UPDATE audit.index_builder
            SET snapshot_timestamp = '2014-01-01 00:00:00.000-03';
        </sql>
    </changeSet>

    <changeSet id="79" author="andr83">
        <addColumn tableName="data"  schemaName="raw_data">
            <column name="source_id" type="bigserial"></column>
        </addColumn>
    </changeSet>

    <changeSet id="80" runInTransaction="false" author="andr83">
        <sql>
            ALTER TYPE raw_data_source ADD VALUE 'osm';
        </sql>
    </changeSet>

</databaseChangeLog>